{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {
    "id": "lxExVykgh1RI"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers, models\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "id": "_nl67x1kiZXG"
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"/content/drive/MyDrive/fer2013.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "h1WmCcF0ivNU",
    "outputId": "9c4876ad-30e3-4857-ed35-147bc6939fbf"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>emotion</th>\n",
       "      <th>pixels</th>\n",
       "      <th>Usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...</td>\n",
       "      <td>Training</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>151 150 147 155 148 133 111 140 170 174 182 15...</td>\n",
       "      <td>Training</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>231 212 156 164 174 138 161 173 182 200 106 38...</td>\n",
       "      <td>Training</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...</td>\n",
       "      <td>Training</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...</td>\n",
       "      <td>Training</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   emotion                                             pixels     Usage\n",
       "0        0  70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...  Training\n",
       "1        0  151 150 147 155 148 133 111 140 170 174 182 15...  Training\n",
       "2        2  231 212 156 164 174 138 161 173 182 200 106 38...  Training\n",
       "3        4  24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...  Training\n",
       "4        6  4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...  Training"
      ]
     },
     "execution_count": 183,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zhnnq_izvcNQ",
    "outputId": "44fa8809-6c86-4f9e-aa29-9b1f54428176"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Training       28709\n",
       "PublicTest      3589\n",
       "PrivateTest     3589\n",
       "Name: Usage, dtype: int64"
      ]
     },
     "execution_count": 184,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Usage\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "mGjWTSHqNiAY",
    "outputId": "e4124199-306b-4c4d-850d-4f59ad3142d9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28709"
      ]
     },
     "execution_count": 185,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {
    "id": "uco8caZivqJm"
   },
   "outputs": [],
   "source": [
    "df1=df[df[\"Usage\"]==\"Training\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {
    "id": "mpkDBDvbvAB5"
   },
   "outputs": [],
   "source": [
    "\n",
    "lt=[]\n",
    "for image_pixels in df1[\"pixels\"]: \n",
    "    image_string = image_pixels.split(' ') #pixels are separated by spaces.\n",
    "    image_data = np.asarray(image_string, dtype=np.uint8).reshape(48,48,1)\n",
    "    lt.append(image_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {
    "id": "0cic6LTovGxJ"
   },
   "outputs": [],
   "source": [
    "X=np.array(lt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "3NIjgpjNz91d",
    "outputId": "a0493538-57d0-43a8-88d3-21f0bdff0eec"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28709, 48, 48, 1)"
      ]
     },
     "execution_count": 189,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {
    "id": "IKQReugYjK7S"
   },
   "outputs": [],
   "source": [
    "\n",
    "y=df1[\"emotion\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {
    "id": "b9dNoCDDrqKi"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "GeLjF1kA0qVv",
    "outputId": "e294fe67-5338-41f2-cbd4-55ea7efe828d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25838, 48, 48, 1)"
      ]
     },
     "execution_count": 192,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "id": "17L-NkXE1CUP"
   },
   "outputs": [],
   "source": [
    "X_train=X_train/255.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {
    "id": "8vfecr8O1Mcv"
   },
   "outputs": [],
   "source": [
    "X_test=X_test/255.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {
    "id": "Z7a6u9Gr1s8Y"
   },
   "outputs": [],
   "source": [
    "input_shape=(48,48,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rrZQpTKUXGrR",
    "outputId": "bbfa99de-7511-44f3-b349-d019f9fb7379"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25838,)"
      ]
     },
     "execution_count": 196,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wFXltUGZXSFr",
    "outputId": "07522634-ea2b-4273-cc24-71701244a322"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25838,)"
      ]
     },
     "execution_count": 197,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "id": "fttwZnXSx4fO"
   },
   "outputs": [],
   "source": [
    "y_train = tf.keras.utils.to_categorical(y_train, 7) \n",
    "y_test = tf.keras.utils.to_categorical(y_test, 7)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {
    "id": "lzbsSleakval"
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n",
    "model = Sequential()\n",
    "model.add(Conv2D(64,(5,5),input_shape=input_shape)) #layer1\n",
    "model.add(Conv2D(64,(5,5))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(128,(5,5))) #layer2\n",
    "model.add(Conv2D(128,(5,5))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(256,(3,3))) #layer3\n",
    "model.add(Conv2D(256,(3,3))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Flatten())#Converts multi dimensional array to 1D channel\n",
    "model.add(Dense(128))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Dense(7)) #output layer\n",
    "model.add(Activation('softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "1-ARwN9723rd",
    "outputId": "2728fb01-dac9-42bf-bcbe-1313b241e526"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_13\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_78 (Conv2D)           (None, 44, 44, 64)        1664      \n",
      "_________________________________________________________________\n",
      "conv2d_79 (Conv2D)           (None, 40, 40, 64)        102464    \n",
      "_________________________________________________________________\n",
      "batch_normalization_52 (Batc (None, 40, 40, 64)        256       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_39 (MaxPooling (None, 20, 20, 64)        0         \n",
      "_________________________________________________________________\n",
      "activation_65 (Activation)   (None, 20, 20, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_80 (Conv2D)           (None, 16, 16, 128)       204928    \n",
      "_________________________________________________________________\n",
      "conv2d_81 (Conv2D)           (None, 12, 12, 128)       409728    \n",
      "_________________________________________________________________\n",
      "batch_normalization_53 (Batc (None, 12, 12, 128)       512       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_40 (MaxPooling (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "activation_66 (Activation)   (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_82 (Conv2D)           (None, 4, 4, 256)         295168    \n",
      "_________________________________________________________________\n",
      "conv2d_83 (Conv2D)           (None, 2, 2, 256)         590080    \n",
      "_________________________________________________________________\n",
      "batch_normalization_54 (Batc (None, 2, 2, 256)         1024      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_41 (MaxPooling (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "activation_67 (Activation)   (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "flatten_18 (Flatten)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_37 (Dense)             (None, 128)               32896     \n",
      "_________________________________________________________________\n",
      "batch_normalization_55 (Batc (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "activation_68 (Activation)   (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dropout_16 (Dropout)         (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_38 (Dense)             (None, 7)                 903       \n",
      "_________________________________________________________________\n",
      "activation_69 (Activation)   (None, 7)                 0         \n",
      "=================================================================\n",
      "Total params: 1,640,135\n",
      "Trainable params: 1,638,983\n",
      "Non-trainable params: 1,152\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer='Adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "vBWnVtJZWuZR",
    "outputId": "1dbf6b0b-fad4-4c96-ca13-75643e5ed1ef"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "808/808 [==============================] - 11s 12ms/step - loss: 1.8656 - accuracy: 0.2807\n",
      "Epoch 2/50\n",
      "808/808 [==============================] - 10s 12ms/step - loss: 1.4366 - accuracy: 0.4478\n",
      "Epoch 3/50\n",
      "808/808 [==============================] - 10s 12ms/step - loss: 1.3089 - accuracy: 0.5005\n",
      "Epoch 4/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 1.2336 - accuracy: 0.5323\n",
      "Epoch 5/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 1.1748 - accuracy: 0.5566\n",
      "Epoch 6/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 1.1317 - accuracy: 0.5695\n",
      "Epoch 7/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 1.0894 - accuracy: 0.5878\n",
      "Epoch 8/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 1.0264 - accuracy: 0.6072\n",
      "Epoch 9/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.9885 - accuracy: 0.6309\n",
      "Epoch 10/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.9400 - accuracy: 0.6425\n",
      "Epoch 11/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.8814 - accuracy: 0.6710\n",
      "Epoch 12/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.8201 - accuracy: 0.6956\n",
      "Epoch 13/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.7564 - accuracy: 0.7215\n",
      "Epoch 14/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.6898 - accuracy: 0.7405\n",
      "Epoch 15/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.6250 - accuracy: 0.7696\n",
      "Epoch 16/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.5704 - accuracy: 0.7915\n",
      "Epoch 17/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.5190 - accuracy: 0.8093\n",
      "Epoch 18/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.4484 - accuracy: 0.8340\n",
      "Epoch 19/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.4074 - accuracy: 0.8534\n",
      "Epoch 20/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.3680 - accuracy: 0.8653\n",
      "Epoch 21/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.3331 - accuracy: 0.8779\n",
      "Epoch 22/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.2968 - accuracy: 0.8922\n",
      "Epoch 23/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.2720 - accuracy: 0.9026\n",
      "Epoch 24/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.2562 - accuracy: 0.9068\n",
      "Epoch 25/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.2378 - accuracy: 0.9153\n",
      "Epoch 26/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.2031 - accuracy: 0.9289\n",
      "Epoch 27/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1959 - accuracy: 0.9303\n",
      "Epoch 28/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1935 - accuracy: 0.9298\n",
      "Epoch 29/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1818 - accuracy: 0.9368\n",
      "Epoch 30/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1603 - accuracy: 0.9431\n",
      "Epoch 31/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1625 - accuracy: 0.9413\n",
      "Epoch 32/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1480 - accuracy: 0.9459\n",
      "Epoch 33/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1525 - accuracy: 0.9457\n",
      "Epoch 34/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1334 - accuracy: 0.9550\n",
      "Epoch 35/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.1379 - accuracy: 0.9503\n",
      "Epoch 36/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.1222 - accuracy: 0.9567\n",
      "Epoch 37/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.1428 - accuracy: 0.9504\n",
      "Epoch 38/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.1160 - accuracy: 0.9605\n",
      "Epoch 39/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1180 - accuracy: 0.9598\n",
      "Epoch 40/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1035 - accuracy: 0.9639\n",
      "Epoch 41/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1135 - accuracy: 0.9595\n",
      "Epoch 42/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1157 - accuracy: 0.9605\n",
      "Epoch 43/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.1036 - accuracy: 0.9650\n",
      "Epoch 44/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0974 - accuracy: 0.9645\n",
      "Epoch 45/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0909 - accuracy: 0.9682\n",
      "Epoch 46/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0972 - accuracy: 0.9647\n",
      "Epoch 47/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0967 - accuracy: 0.9658\n",
      "Epoch 48/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0895 - accuracy: 0.9695\n",
      "Epoch 49/50\n",
      "808/808 [==============================] - 11s 13ms/step - loss: 0.0844 - accuracy: 0.9715\n",
      "Epoch 50/50\n",
      "808/808 [==============================] - 10s 13ms/step - loss: 0.0950 - accuracy: 0.9669\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f60cbd7d358>"
      ]
     },
     "execution_count": 201,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train,y_train, epochs=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OFtirOc2VV3k",
    "outputId": "fb76afba-6971-4c9d-ee74-dd06150286e8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90/90 [==============================] - 1s 6ms/step - loss: 2.8466 - accuracy: 0.5796\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[2.8465983867645264, 0.5795890092849731]"
      ]
     },
     "execution_count": 207,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "SWSU92YQUQLL",
    "outputId": "124e9325-f4c7-4d2a-e8c7-803238c5b565"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5.14745080e-10, 2.14540889e-17, 7.37864248e-05, ...,\n",
       "        8.82364631e-01, 2.54646022e-12, 1.17559627e-01],\n",
       "       [8.41068382e-10, 1.59220097e-15, 2.08171778e-11, ...,\n",
       "        4.90292496e-06, 5.62385967e-13, 2.59151446e-12],\n",
       "       [1.65319771e-01, 3.41357887e-01, 1.09359678e-02, ...,\n",
       "        1.02384975e-02, 1.82290918e-07, 4.59794521e-01],\n",
       "       ...,\n",
       "       [6.88018335e-04, 3.20983748e-03, 9.86994445e-01, ...,\n",
       "        3.70101701e-03, 5.08647319e-03, 7.87547538e-09],\n",
       "       [7.14017451e-02, 3.24327620e-10, 6.87028656e-10, ...,\n",
       "        4.07552391e-01, 7.32694687e-08, 5.21045804e-01],\n",
       "       [1.58902621e-05, 5.57260106e-11, 4.43637077e-07, ...,\n",
       "        4.76285038e-07, 7.56276906e-01, 4.40800541e-05]], dtype=float32)"
      ]
     },
     "execution_count": 202,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "88Lu5fHSZwxN",
    "outputId": "5b0b0b0b-ba3b-47b5-be11-6eedb97cd575"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 0., ..., 1., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 1., 0., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 1., 0., 0.],\n",
       "       [0., 0., 0., ..., 1., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 203,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "id": "Lkn0xNHHJJa4"
   },
   "outputs": [],
   "source": [
    "from keras.layers import Input, Lambda, Dense, Flatten\n",
    "from keras.models import Model\n",
    "from keras.applications.vgg16 import VGG16\n",
    "from keras.applications.vgg16 import preprocess_input\n",
    "from keras.preprocessing import image\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.models import Sequential\n",
    "import numpy as np\n",
    "from glob import glob\n",
    "import matplotlib.pyplot as plt\n",
    "from keras.layers import *\n",
    "\n",
    "# re-size all the images to this\n",
    "#IMAGE_SIZE = [48,48]\n",
    "from keras.applications.vgg16 import VGG16\n",
    "from keras.layers import *\n",
    "\n",
    "img_size_target = 48\n",
    "img_input = Input(shape=(img_size_target, img_size_target, 1))\n",
    "img_conc = Concatenate()([img_input, img_input, img_input])  \n",
    "vgg = VGG16(input_tensor=img_conc,weights='imagenet', include_top=False)\n",
    "for layer in vgg.layers[:15]:\n",
    "    layer.trainable = False\n",
    "\n",
    "for layer in vgg.layers[15:]:\n",
    "    layer.trainable = True\n",
    "    \n",
    "last_layer = vgg.get_layer('block5_pool')\n",
    "last_output = last_layer.output\n",
    "    \n",
    "# Flatten the output layer to 1 dimension\n",
    "x = GlobalMaxPooling2D()(last_output)\n",
    "# Add a fully connected layer with 512 hidden units and ReLU activation\n",
    "x = Dense(512, activation='relu')(x)\n",
    "# Add a dropout rate of 0.5\n",
    "x = Dropout(0.5)(x)\n",
    "# Add a final sigmoid layer for classification\n",
    "x = layers.Dense(7, activation='softmax')(x)\n",
    "\n",
    "model3 = Model(vgg.input, x)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "L6O9xf99JJfI",
    "outputId": "a623a740-6014-41e9-8988-050f938d8633"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_10\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_14 (InputLayer)           [(None, 48, 48, 1)]  0                                            \n",
      "__________________________________________________________________________________________________\n",
      "concatenate_10 (Concatenate)    (None, 48, 48, 3)    0           input_14[0][0]                   \n",
      "                                                                 input_14[0][0]                   \n",
      "                                                                 input_14[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "block1_conv1 (Conv2D)           (None, 48, 48, 64)   1792        concatenate_10[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "block1_conv2 (Conv2D)           (None, 48, 48, 64)   36928       block1_conv1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block1_pool (MaxPooling2D)      (None, 24, 24, 64)   0           block1_conv2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block2_conv1 (Conv2D)           (None, 24, 24, 128)  73856       block1_pool[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block2_conv2 (Conv2D)           (None, 24, 24, 128)  147584      block2_conv1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block2_pool (MaxPooling2D)      (None, 12, 12, 128)  0           block2_conv2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block3_conv1 (Conv2D)           (None, 12, 12, 256)  295168      block2_pool[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block3_conv2 (Conv2D)           (None, 12, 12, 256)  590080      block3_conv1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block3_conv3 (Conv2D)           (None, 12, 12, 256)  590080      block3_conv2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block3_pool (MaxPooling2D)      (None, 6, 6, 256)    0           block3_conv3[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block4_conv1 (Conv2D)           (None, 6, 6, 512)    1180160     block3_pool[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block4_conv2 (Conv2D)           (None, 6, 6, 512)    2359808     block4_conv1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block4_conv3 (Conv2D)           (None, 6, 6, 512)    2359808     block4_conv2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block4_pool (MaxPooling2D)      (None, 3, 3, 512)    0           block4_conv3[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block5_conv1 (Conv2D)           (None, 3, 3, 512)    2359808     block4_pool[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "block5_conv2 (Conv2D)           (None, 3, 3, 512)    2359808     block5_conv1[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block5_conv3 (Conv2D)           (None, 3, 3, 512)    2359808     block5_conv2[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "block5_pool (MaxPooling2D)      (None, 1, 1, 512)    0           block5_conv3[0][0]               \n",
      "__________________________________________________________________________________________________\n",
      "global_max_pooling2d_5 (GlobalM (None, 512)          0           block5_pool[0][0]                \n",
      "__________________________________________________________________________________________________\n",
      "dense_43 (Dense)                (None, 512)          262656      global_max_pooling2d_5[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "dropout_19 (Dropout)            (None, 512)          0           dense_43[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "dense_44 (Dense)                (None, 7)            3591        dropout_19[0][0]                 \n",
      "==================================================================================================\n",
      "Total params: 14,980,935\n",
      "Trainable params: 7,345,671\n",
      "Non-trainable params: 7,635,264\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model3.compile(loss='categorical_crossentropy',\n",
    "              optimizer='Adam',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "model3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "QxX8HbdFWvYj"
   },
   "outputs": [],
   "source": [
    "model3.fit(X_train,y_train, epochs=50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "lkKfLHv7YcgM"
   },
   "source": [
    "Improve Test Accuracy Using Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {
    "id": "qijy-NOQW4HW"
   },
   "outputs": [],
   "source": [
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.models import Sequential\n",
    "data_augmentation = keras.Sequential(\n",
    "  [\n",
    "    layers.experimental.preprocessing.RandomFlip(\"horizontal\", \n",
    "                                                 input_shape=(48, \n",
    "                                                              48,\n",
    "                                                              1)),\n",
    "    layers.experimental.preprocessing.RandomRotation(0.1),\n",
    "    layers.experimental.preprocessing.RandomZoom(0.1),\n",
    "  ]\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {
    "id": "7-s1FTfYXmIw"
   },
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n",
    "model = Sequential()\n",
    "model.add(data_augmentation)\n",
    "model.add(Conv2D(64,(5,5),input_shape=input_shape)) #layer1\n",
    "model.add(Conv2D(64,(5,5))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(128,(5,5))) #layer2\n",
    "model.add(Conv2D(128,(5,5))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(256,(3,3))) #layer3\n",
    "model.add(Conv2D(256,(3,3))) \n",
    "model.add(BatchNormalization())\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Flatten())#Converts multi dimensional array to 1D channel\n",
    "model.add(Dense(128))\n",
    "model.add(BatchNormalization())\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.25))\n",
    "model.add(Dense(7)) #output layer\n",
    "model.add(Activation('softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "dXZyvXByX4Sm",
    "outputId": "48efe3d2-eaab-4db3-c8ed-29a1e27a3c29"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_16\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "sequential_15 (Sequential)   (None, 48, 48, 1)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_90 (Conv2D)           (None, 44, 44, 64)        1664      \n",
      "_________________________________________________________________\n",
      "conv2d_91 (Conv2D)           (None, 40, 40, 64)        102464    \n",
      "_________________________________________________________________\n",
      "batch_normalization_60 (Batc (None, 40, 40, 64)        256       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_45 (MaxPooling (None, 20, 20, 64)        0         \n",
      "_________________________________________________________________\n",
      "activation_75 (Activation)   (None, 20, 20, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_92 (Conv2D)           (None, 16, 16, 128)       204928    \n",
      "_________________________________________________________________\n",
      "conv2d_93 (Conv2D)           (None, 12, 12, 128)       409728    \n",
      "_________________________________________________________________\n",
      "batch_normalization_61 (Batc (None, 12, 12, 128)       512       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_46 (MaxPooling (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "activation_76 (Activation)   (None, 6, 6, 128)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_94 (Conv2D)           (None, 4, 4, 256)         295168    \n",
      "_________________________________________________________________\n",
      "conv2d_95 (Conv2D)           (None, 2, 2, 256)         590080    \n",
      "_________________________________________________________________\n",
      "batch_normalization_62 (Batc (None, 2, 2, 256)         1024      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_47 (MaxPooling (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "activation_77 (Activation)   (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "flatten_20 (Flatten)         (None, 256)               0         \n",
      "_________________________________________________________________\n",
      "dense_47 (Dense)             (None, 128)               32896     \n",
      "_________________________________________________________________\n",
      "batch_normalization_63 (Batc (None, 128)               512       \n",
      "_________________________________________________________________\n",
      "activation_78 (Activation)   (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dropout_21 (Dropout)         (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_48 (Dense)             (None, 7)                 903       \n",
      "_________________________________________________________________\n",
      "activation_79 (Activation)   (None, 7)                 0         \n",
      "=================================================================\n",
      "Total params: 1,640,135\n",
      "Trainable params: 1,638,983\n",
      "Non-trainable params: 1,152\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer='Adam',\n",
    "              loss='categorical_crossentropy',\n",
    "              metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "rwhMPa32X8vG",
    "outputId": "663cc9e2-0848-466e-9a4f-75b48667a81d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.2851 - accuracy: 0.5083\n",
      "Epoch 2/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.2577 - accuracy: 0.5251\n",
      "Epoch 3/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.2449 - accuracy: 0.5258\n",
      "Epoch 4/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.2219 - accuracy: 0.5353\n",
      "Epoch 5/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.2089 - accuracy: 0.5413\n",
      "Epoch 6/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1872 - accuracy: 0.5475\n",
      "Epoch 7/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1763 - accuracy: 0.5506\n",
      "Epoch 8/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1644 - accuracy: 0.5582\n",
      "Epoch 9/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1493 - accuracy: 0.5642\n",
      "Epoch 10/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1408 - accuracy: 0.5703\n",
      "Epoch 11/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1284 - accuracy: 0.5742\n",
      "Epoch 12/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1166 - accuracy: 0.5777\n",
      "Epoch 13/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1106 - accuracy: 0.5773\n",
      "Epoch 14/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.1018 - accuracy: 0.5832\n",
      "Epoch 15/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0904 - accuracy: 0.5865\n",
      "Epoch 16/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0810 - accuracy: 0.5889\n",
      "Epoch 17/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0775 - accuracy: 0.5927\n",
      "Epoch 18/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0675 - accuracy: 0.5935\n",
      "Epoch 19/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0606 - accuracy: 0.5945\n",
      "Epoch 20/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0454 - accuracy: 0.6086\n",
      "Epoch 21/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0508 - accuracy: 0.6050\n",
      "Epoch 22/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0383 - accuracy: 0.6062\n",
      "Epoch 23/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0345 - accuracy: 0.6091\n",
      "Epoch 24/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0275 - accuracy: 0.6125\n",
      "Epoch 25/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0127 - accuracy: 0.6199\n",
      "Epoch 26/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0121 - accuracy: 0.6175\n",
      "Epoch 27/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0034 - accuracy: 0.6229\n",
      "Epoch 28/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 1.0083 - accuracy: 0.6203\n",
      "Epoch 29/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9951 - accuracy: 0.6234\n",
      "Epoch 30/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9875 - accuracy: 0.6269\n",
      "Epoch 31/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9841 - accuracy: 0.6287\n",
      "Epoch 32/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9791 - accuracy: 0.6321\n",
      "Epoch 33/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9672 - accuracy: 0.6365\n",
      "Epoch 34/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9689 - accuracy: 0.6340\n",
      "Epoch 35/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9608 - accuracy: 0.6416\n",
      "Epoch 36/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9576 - accuracy: 0.6382\n",
      "Epoch 37/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9541 - accuracy: 0.6395\n",
      "Epoch 38/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9426 - accuracy: 0.6476\n",
      "Epoch 39/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9467 - accuracy: 0.6425\n",
      "Epoch 40/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9381 - accuracy: 0.6471\n",
      "Epoch 41/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9322 - accuracy: 0.6534\n",
      "Epoch 42/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9290 - accuracy: 0.6502\n",
      "Epoch 43/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9253 - accuracy: 0.6501\n",
      "Epoch 44/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9224 - accuracy: 0.6545\n",
      "Epoch 45/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9115 - accuracy: 0.6560\n",
      "Epoch 46/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9079 - accuracy: 0.6593\n",
      "Epoch 47/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.9073 - accuracy: 0.6590\n",
      "Epoch 48/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.8986 - accuracy: 0.6583\n",
      "Epoch 49/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.8997 - accuracy: 0.6634\n",
      "Epoch 50/50\n",
      "808/808 [==============================] - 11s 14ms/step - loss: 0.8970 - accuracy: 0.6641\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f60ccf56b00>"
      ]
     },
     "execution_count": 221,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train, epochs=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "YRztIKkNYCE2",
    "outputId": "0a17222b-8286-425c-e586-70552159d736"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90/90 [==============================] - 1s 6ms/step - loss: 1.1902 - accuracy: 0.5890\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[1.1902378797531128, 0.5889933705329895]"
      ]
     },
     "execution_count": 222,
     "metadata": {
      "tags": []
     },
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.evaluate(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cxliZc_HbvrZ"
   },
   "outputs": [],
   "source": [
    "Summary: Model accuracy increased with Data Augmentation."
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Module4_file3.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
